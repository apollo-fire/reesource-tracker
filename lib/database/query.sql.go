// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package database

import (
	"context"
	"time"
)

const getProductByID = `-- name: GetProductByID :one
SELECT id, name, parent_product_id FROM products WHERE id = ?
`

func (q *Queries) GetProductByID(ctx context.Context, id interface{}) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductByID, id)
	var i Product
	err := row.Scan(&i.ID, &i.Name, &i.ParentProductID)
	return i, err
}

const getProducts = `-- name: GetProducts :many
WITH RECURSIVE item_tree(id, name, full_name) AS (
    SELECT id, name, name as full_name FROM products
    UNION ALL
    SELECT p.id, p.name, item_tree.full_name || ' > ' || p.name
    FROM products p
    JOIN item_tree ON p.parent_product_id = item_tree.id
)
SELECT
    item_tree.id AS item_id,
    item_tree.name AS item_name,
    item_tree.full_name AS combined_name
FROM item_tree
`

type GetProductsRow struct {
	ItemID       interface{}
	ItemName     string
	CombinedName string
}

func (q *Queries) GetProducts(ctx context.Context) ([]GetProductsRow, error) {
	rows, err := q.db.QueryContext(ctx, getProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProductsRow
	for rows.Next() {
		var i GetProductsRow
		if err := rows.Scan(&i.ItemID, &i.ItemName, &i.CombinedName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSampleById = `-- name: GetSampleById :one
SELECT id, location_id, product_id, time_registered, last_update, state FROM samples WHERE id = ?
`

func (q *Queries) GetSampleById(ctx context.Context, id interface{}) (Sample, error) {
	row := q.db.QueryRowContext(ctx, getSampleById, id)
	var i Sample
	err := row.Scan(
		&i.ID,
		&i.LocationID,
		&i.ProductID,
		&i.TimeRegistered,
		&i.LastUpdate,
		&i.State,
	)
	return i, err
}

const listLocations = `-- name: ListLocations :many
SELECT id, name, parent_location_id FROM locations
ORDER BY name
`

func (q *Queries) ListLocations(ctx context.Context) ([]Location, error) {
	rows, err := q.db.QueryContext(ctx, listLocations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Location
	for rows.Next() {
		var i Location
		if err := rows.Scan(&i.ID, &i.Name, &i.ParentLocationID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProducts = `-- name: ListProducts :many
SELECT id, name, parent_product_id FROM products ORDER BY name
`

func (q *Queries) ListProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(&i.ID, &i.Name, &i.ParentProductID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSampleMods = `-- name: ListSampleMods :many
SELECT id, sample_id, name, time_added, time_removed FROM sample_mods
WHERE sample_mods.sample_id = ?
ORDER BY time_added
`

func (q *Queries) ListSampleMods(ctx context.Context, sampleID interface{}) ([]SampleMod, error) {
	rows, err := q.db.QueryContext(ctx, listSampleMods, sampleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SampleMod
	for rows.Next() {
		var i SampleMod
		if err := rows.Scan(
			&i.ID,
			&i.SampleID,
			&i.Name,
			&i.TimeAdded,
			&i.TimeRemoved,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSamples = `-- name: ListSamples :many
SELECT 
    samples.id, samples.location_id, samples.product_id, samples.time_registered, samples.last_update, samples.state, 
    COALESCE((
        SELECT GROUP_CONCAT(sample_mods.name, ', ')
        FROM sample_mods 
        WHERE sample_mods.sample_id = samples.id AND sample_mods.time_removed IS NULL
    ), '') AS current_mods_summary
FROM samples
ORDER BY time_registered
`

type ListSamplesRow struct {
	ID                 interface{}
	LocationID         interface{}
	ProductID          interface{}
	TimeRegistered     time.Time
	LastUpdate         time.Time
	State              string
	CurrentModsSummary interface{}
}

func (q *Queries) ListSamples(ctx context.Context) ([]ListSamplesRow, error) {
	rows, err := q.db.QueryContext(ctx, listSamples)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListSamplesRow
	for rows.Next() {
		var i ListSamplesRow
		if err := rows.Scan(
			&i.ID,
			&i.LocationID,
			&i.ProductID,
			&i.TimeRegistered,
			&i.LastUpdate,
			&i.State,
			&i.CurrentModsSummary,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrCreateSample = `-- name: UpdateOrCreateSample :one
INSERT INTO samples (id, location_id, product_id, time_registered, last_update, state)
VALUES (?, ?, ?, ?, ?, ?)
ON CONFLICT(id) DO UPDATE SET
    location_id = EXCLUDED.location_id,
    product_id = EXCLUDED.product_id,
    last_update = EXCLUDED.last_update,
    state = EXCLUDED.state
RETURNING id, location_id, product_id, time_registered, last_update, state
`

type UpdateOrCreateSampleParams struct {
	ID             interface{}
	LocationID     interface{}
	ProductID      interface{}
	TimeRegistered time.Time
	LastUpdate     time.Time
	State          string
}

func (q *Queries) UpdateOrCreateSample(ctx context.Context, arg UpdateOrCreateSampleParams) (Sample, error) {
	row := q.db.QueryRowContext(ctx, updateOrCreateSample,
		arg.ID,
		arg.LocationID,
		arg.ProductID,
		arg.TimeRegistered,
		arg.LastUpdate,
		arg.State,
	)
	var i Sample
	err := row.Scan(
		&i.ID,
		&i.LocationID,
		&i.ProductID,
		&i.TimeRegistered,
		&i.LastUpdate,
		&i.State,
	)
	return i, err
}

const upsertProduct = `-- name: UpsertProduct :exec
INSERT INTO products (id, name, parent_product_id)
VALUES (?, ?, ?)
ON CONFLICT(id) DO UPDATE SET
    name = EXCLUDED.name,
    parent_product_id = EXCLUDED.parent_product_id
`

type UpsertProductParams struct {
	ID              interface{}
	Name            string
	ParentProductID interface{}
}

func (q *Queries) UpsertProduct(ctx context.Context, arg UpsertProductParams) error {
	_, err := q.db.ExecContext(ctx, upsertProduct, arg.ID, arg.Name, arg.ParentProductID)
	return err
}
