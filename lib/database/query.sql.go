// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const addSampleMod = `-- name: AddSampleMod :exec
INSERT INTO
    sample_mods (id, sample_id, name, time_added, time_removed)
VALUES
    (?, ?, ?, ?, NULL)
`

type AddSampleModParams struct {
	ID        interface{}
	SampleID  interface{}
	Name      string
	TimeAdded time.Time
}

func (q *Queries) AddSampleMod(ctx context.Context, arg AddSampleModParams) error {
	_, err := q.db.ExecContext(ctx, addSampleMod,
		arg.ID,
		arg.SampleID,
		arg.Name,
		arg.TimeAdded,
	)
	return err
}

const deleteLocationByID = `-- name: DeleteLocationByID :exec
DELETE FROM locations
WHERE
    id = ?
`

func (q *Queries) DeleteLocationByID(ctx context.Context, id interface{}) error {
	_, err := q.db.ExecContext(ctx, deleteLocationByID, id)
	return err
}

const deleteProductByID = `-- name: DeleteProductByID :exec
DELETE FROM products
WHERE
    id = ?
`

func (q *Queries) DeleteProductByID(ctx context.Context, id interface{}) error {
	_, err := q.db.ExecContext(ctx, deleteProductByID, id)
	return err
}

const getLocation = `-- name: GetLocation :one
SELECT
    id,
    name,
    description,
    parent_location_id
FROM
    locations
WHERE
    id = ?
`

func (q *Queries) GetLocation(ctx context.Context, id interface{}) (Location, error) {
	row := q.db.QueryRowContext(ctx, getLocation, id)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ParentLocationID,
	)
	return i, err
}

const getLocations = `-- name: GetLocations :many
SELECT
    id,
    name,
    description,
    parent_location_id
FROM
    locations
ORDER BY
    name
`

func (q *Queries) GetLocations(ctx context.Context) ([]Location, error) {
	rows, err := q.db.QueryContext(ctx, getLocations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Location
	for rows.Next() {
		var i Location
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ParentLocationID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductByID = `-- name: GetProductByID :one
SELECT
    id,
    name,
    parent_product_id
FROM
    products
WHERE
    id = ?
`

func (q *Queries) GetProductByID(ctx context.Context, id interface{}) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductByID, id)
	var i Product
	err := row.Scan(&i.ID, &i.Name, &i.ParentProductID)
	return i, err
}

const getProducts = `-- name: GetProducts :many
SELECT
    id, name, parent_product_id
FROM
    products
ORDER BY
    name
`

func (q *Queries) GetProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(&i.ID, &i.Name, &i.ParentProductID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSampleById = `-- name: GetSampleById :one
SELECT
    id, location_id, product_id, time_registered, last_update, state
FROM
    samples
WHERE
    id = ?
`

func (q *Queries) GetSampleById(ctx context.Context, id interface{}) (Sample, error) {
	row := q.db.QueryRowContext(ctx, getSampleById, id)
	var i Sample
	err := row.Scan(
		&i.ID,
		&i.LocationID,
		&i.ProductID,
		&i.TimeRegistered,
		&i.LastUpdate,
		&i.State,
	)
	return i, err
}

const listProducts = `-- name: ListProducts :many
SELECT
    id,
    name,
    parent_product_id
FROM
    products
ORDER BY
    name
`

func (q *Queries) ListProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(&i.ID, &i.Name, &i.ParentProductID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSampleMods = `-- name: ListSampleMods :many
SELECT
    id, sample_id, name, time_added, time_removed
FROM
    sample_mods
WHERE
    sample_mods.sample_id = ?
ORDER BY
    time_added
`

func (q *Queries) ListSampleMods(ctx context.Context, sampleID interface{}) ([]SampleMod, error) {
	rows, err := q.db.QueryContext(ctx, listSampleMods, sampleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SampleMod
	for rows.Next() {
		var i SampleMod
		if err := rows.Scan(
			&i.ID,
			&i.SampleID,
			&i.Name,
			&i.TimeAdded,
			&i.TimeRemoved,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSamples = `-- name: ListSamples :many
SELECT
    samples.id, samples.location_id, samples.product_id, samples.time_registered, samples.last_update, samples.state,
    COALESCE(
        (
            SELECT
                GROUP_CONCAT (sample_mods.name, ', ')
            FROM
                sample_mods
            WHERE
                sample_mods.sample_id = samples.id
                AND sample_mods.time_removed IS NULL
        ),
        ''
    ) AS current_mods_summary
FROM
    samples
ORDER BY
    time_registered
`

type ListSamplesRow struct {
	ID                 interface{}
	LocationID         interface{}
	ProductID          interface{}
	TimeRegistered     sql.NullTime
	LastUpdate         sql.NullTime
	State              string
	CurrentModsSummary interface{}
}

func (q *Queries) ListSamples(ctx context.Context) ([]ListSamplesRow, error) {
	rows, err := q.db.QueryContext(ctx, listSamples)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListSamplesRow
	for rows.Next() {
		var i ListSamplesRow
		if err := rows.Scan(
			&i.ID,
			&i.LocationID,
			&i.ProductID,
			&i.TimeRegistered,
			&i.LastUpdate,
			&i.State,
			&i.CurrentModsSummary,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeSampleMod = `-- name: RemoveSampleMod :exec
UPDATE sample_mods
SET
    time_removed = ?
WHERE
    id = ?
`

type RemoveSampleModParams struct {
	TimeRemoved sql.NullTime
	ID          interface{}
}

func (q *Queries) RemoveSampleMod(ctx context.Context, arg RemoveSampleModParams) error {
	_, err := q.db.ExecContext(ctx, removeSampleMod, arg.TimeRemoved, arg.ID)
	return err
}

const updateOrCreateSample = `-- name: UpdateOrCreateSample :one
INSERT INTO
    samples (
        id,
        location_id,
        product_id,
        time_registered,
        last_update,
        state
    )
VALUES
    (?, ?, ?, ?, ?, ?) ON CONFLICT (id) DO
UPDATE
SET
    location_id = EXCLUDED.location_id,
    product_id = EXCLUDED.product_id,
    last_update = EXCLUDED.last_update,
    state = EXCLUDED.state RETURNING id, location_id, product_id, time_registered, last_update, state
`

type UpdateOrCreateSampleParams struct {
	ID             interface{}
	LocationID     interface{}
	ProductID      interface{}
	TimeRegistered sql.NullTime
	LastUpdate     sql.NullTime
	State          string
}

func (q *Queries) UpdateOrCreateSample(ctx context.Context, arg UpdateOrCreateSampleParams) (Sample, error) {
	row := q.db.QueryRowContext(ctx, updateOrCreateSample,
		arg.ID,
		arg.LocationID,
		arg.ProductID,
		arg.TimeRegistered,
		arg.LastUpdate,
		arg.State,
	)
	var i Sample
	err := row.Scan(
		&i.ID,
		&i.LocationID,
		&i.ProductID,
		&i.TimeRegistered,
		&i.LastUpdate,
		&i.State,
	)
	return i, err
}

const upsertLocation = `-- name: UpsertLocation :exec
INSERT INTO
    locations (id, name, description, parent_location_id)
VALUES
    (?, ?, ?, ?) ON CONFLICT (id) DO
UPDATE
SET
    name = EXCLUDED.name,
    description = EXCLUDED.description,
    parent_location_id = EXCLUDED.parent_location_id
`

type UpsertLocationParams struct {
	ID               interface{}
	Name             string
	Description      sql.NullString
	ParentLocationID interface{}
}

func (q *Queries) UpsertLocation(ctx context.Context, arg UpsertLocationParams) error {
	_, err := q.db.ExecContext(ctx, upsertLocation,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.ParentLocationID,
	)
	return err
}

const upsertProduct = `-- name: UpsertProduct :exec
INSERT INTO
    products (id, name, parent_product_id)
VALUES
    (?, ?, ?) ON CONFLICT (id) DO
UPDATE
SET
    name = EXCLUDED.name,
    parent_product_id = EXCLUDED.parent_product_id
`

type UpsertProductParams struct {
	ID              interface{}
	Name            string
	ParentProductID interface{}
}

func (q *Queries) UpsertProduct(ctx context.Context, arg UpsertProductParams) error {
	_, err := q.db.ExecContext(ctx, upsertProduct, arg.ID, arg.Name, arg.ParentProductID)
	return err
}
